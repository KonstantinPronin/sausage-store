variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  FRONTEND_ARTIFACT_PATH: ${NEXUS_REPO_URL}/sausage-store-pronin-konstantin-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  FRONTEND_NOTIFICATION_DATA: |
    {
      "blocks": [
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "Frontend #${VERSION} is ready, <$FRONTEND_ARTIFACT_PATH|download artifacts>."
          }
        }
      ]
    }

stages:
  - build
  - test
  - upload
  - notify

cache:
  paths:
    - frontend/dist/frontend

build-frontend:
  stage: build
  rules:
    - changes:
        - frontend/*
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend

sonarqube-frontend:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner 
      -Dsonar.qualitygate.wait=true
      -Dsonar.sources=.
      -Dsonar.projectKey=${SONAR_FRONTEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONARQUBE_LOGIN}

upload-frontend:
  stage: upload
  needs:
    - build-frontend
  rules:
    - changes:
        - frontend/*
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${FRONTEND_ARTIFACT_PATH}

slack-notification-frontend:
  stage: notify
  needs:
    - upload-frontend
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[notify]/
      changes:
        - frontend/*
  script:
    - 'curl --request POST --header "Content-type: application/json" --data "$FRONTEND_NOTIFICATION_DATA" "$WEBHOOK_URL"'
