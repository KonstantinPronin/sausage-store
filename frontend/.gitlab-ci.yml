include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
    
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  FRONTEND_ARTIFACT_PATH: ${NEXUS_REPO_URL}/sausage-store-pronin-konstantin-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
  FRONTEND_NOTIFICATION_DATA: |
    {
      "message": "Frontend #${VERSION} is ready, [download artifacts]($FRONTEND_ARTIFACT_PATH)"
    }

stages:
  - test
  - build
  - notify
  - deploy

cache:
  paths:
    - frontend/.npm/

spotbugs-sast:
  stage: test
  rules:
    - changes:
        - frontend/*

sonarqube-frontend:
  stage: test
  rules:
    - changes:
        - frontend/*
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner 
      -Dsonar.qualitygate.wait=true
      -Dsonar.sources=.
      -Dsonar.projectKey=${SONAR_FRONTEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONARQUBE_LOGIN}

build-frontend:
  stage: build
  rules:
    - changes:
        - frontend/*
  needs:
    - spotbugs-sast
    - sonarqube-frontend      
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$VERSION

slack-notification-frontend:
  stage: notify
  needs:
    - build-frontend
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[notify]/
      changes:
        - frontend/*
  script:
    - 'curl --request POST --header "Content-type: application/json" --data "$FRONTEND_NOTIFICATION_DATA" "$WEBHOOK_URL"'

frontend-deploy:
  stage: deploy
  needs:
    - build-frontend
  environment:
    name: production-frontend
  rules:
    - when: manual
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
      export "CI_REGISTRY=${CI_REGISTRY}";
      export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./frontend/deploy.sh