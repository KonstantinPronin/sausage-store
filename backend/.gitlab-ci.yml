include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
    
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  M2_REPO: ${CI_PROJECT_DIR}/.m2/repository
  BACKEND_ARTIFACTS_URL: ${NEXUS_REPO_URL}/sausage-store-pronin-konstantin-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  BACKEND_NOTIFICATION_DATA: |
    {
      "message": "Backend #${VERSION} is ready, [download artifacts](${BACKEND_ARTIFACTS_URL})."
    }

stages:
  - test
  - build
  - notify
  - deploy

cache:
  paths:
    - ${M2_REPO}

spotbugs-sast:
  stage: test
  rules:
    - changes:
        - backend/*
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 16
    MAVEN_REPO_PATH: ${M2_REPO}

sonarqube-backend:
  stage: test
  rules:
    - changes:
        - backend/*
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar 
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.projectKey=${SONAR_BACKEND_PROJECT_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONARQUBE_LOGIN}

build-backend:
  stage: build
  rules:
    - changes:
        - backend/*
  needs:
    - spotbugs-sast
    - sonarqube-backend         
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=${VERSION}
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$VERSION
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$VERSION

slack-notification-backend:
  stage: notify
  needs:
    - build-backend
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[notify]/
      changes:
        - backend/*
  script:
    - 'curl --request POST --header "Content-type: application/json" --data "$BACKEND_NOTIFICATION_DATA" "$WEBHOOK_URL"'

backend-deploy:
  stage: deploy
  needs:
    - build-backend
  environment:
    name: production-backend
  rules:
    - when: manual
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "PSQL_CONNECTION_STRING=${PSQL_CONNECTION_STRING}";
      export "PSQL_USER=${PSQL_USER}";
      export "PSQL_PASSWORD=${PSQL_PASSWORD}";
      export "MONGO_CONNECTION_STRING=${MONGO_CONNECTION_STRING}";
      export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
      export "CI_REGISTRY=${CI_REGISTRY}";
      export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./backend/deploy.sh
